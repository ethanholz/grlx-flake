name: Get latest release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 14 * * *"
  

jobs:
  check_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Install python
        uses: actions/setup-python@v5

      - name: Check for latest release from target repo
        id: check_release
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const owner = 'gogrlx';  // Target repo owner
            const repo = 'grlx';     // Target repo name
            const latestRelease = await github.rest.repos.getLatestRelease({ owner, repo });

            const releaseTag = latestRelease.data.tag_name;
            console.log(`Latest release: ${releaseTag}`);

            // Read the current JSON file
            const fs = require('fs');
            const path = './grlx.json';  // Update with the path to your file
            const currentData = JSON.parse(fs.readFileSync(path, 'utf8'));

            // Check if the release is new
            if (!currentData[releaseTag]) {
              console.log('New release detected:', releaseTag);
              return releaseTag;  // This output will be used in the next steps
            } else {
              console.log('No new release.');
              return "";
            }
      - name: Update
        if: ${{steps.check_release.outputs.result != ''}}
        run: python update.py ${{steps.check_release.outputs.result}}
      - name: Print the grlx.json
        run: cat grlx.json
      - name: Create PR of new version
        if: ${{steps.check_release.outputs.result != ''}}
        uses: peter-evans/create-pull-request@v7
        with:
          title: Add ${{steps.check_release.outputs.result}} 
          commit-message: 'feat: add ${{steps.check_release.outputs.result}}'
